async function getCoordinates(areaCode) {
    const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${areaCode}&format=json&addressdetails=1`);
    
    if (response.ok) {
        const data = await response.json();
        if (data.length > 0) {
            const lat = parseFloat(data[0].lat);
            const lon = parseFloat(data[0].lon);
            return { lat, lon };
        } else {
            throw new Error("No data found for the area code.");
        }
    } else {
        throw new Error("Error fetching coordinates.");
    }
}

function calculateRadiusCoordinates(lat, lon, radiusKm) {
    const radiusEarthKm = 6371; // Radius of the Earth in km
    const latRadians = lat * (Math.PI / 180);
    const lonRadians = lon * (Math.PI / 180);

    const coordinates = [];

    for (let angle = 0; angle < 360; angle += 10) {
        const angleRad = angle * (Math.PI / 180);
        const deltaLat = (radiusKm / radiusEarthKm) * (180 / Math.PI);
        const deltaLon = (radiusKm / radiusEarthKm) * (180 / Math.PI) / Math.cos(latRadians);

        coordinates.push({
            lat: lat + deltaLat * Math.sin(angleRad),
            lon: lon + deltaLon * Math.cos(angleRad)
        });
    }

    return coordinates;
}

document.getElementById('fetchData').addEventListener('click', async () => {
    const areaCode = document.getElementById('areaCode').value;
    const outputElement = document.getElementById('output');
    
    try {
        const { lat, lon } = await getCoordinates(areaCode);
        const radiusCoordinates = calculateRadiusCoordinates(lat, lon, 50); // 50 km radius

        outputElement.textContent = `Coordinates for ${areaCode}: \nLatitude: ${lat}, Longitude: ${lon}\n\nCoordinates around a 50 km radius:`;
        radiusCoordinates.forEach(coord => {
            outputElement.textContent += `\nLatitude: ${coord.lat.toFixed(6)}, Longitude: ${coord.lon.toFixed(6)}`;
        });
    } catch (error) {
        outputElement.textContent = error.message;
    }
});


<!-- HTML: -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Area Code to Latitude/Longitude</title>
</head>
<body>
    <h1>Find Coordinates and Radius</h1>
    <input type="text" id="areaCode" placeholder="Enter Area Code" />
    <button id="fetchData">Get Coordinates and Radius</button>
    <pre id="output"></pre>

    <script src="script.js"></script>
</body>
</html>

<!-- python: API -->

import requests

def get_coordinates_from_area_code(area_code):
    # Nominatim API endpoint
    nominatim_url = "https://nominatim.openstreetmap.org/search"
    
    # Request parameters
    params = {
        "q": area_code,
        "format": "json",
        "addressdetails": 1
    }
    
    # Send request
    response = requests.get(nominatim_url, params=params)
    
    if response.status_code == 200 and response.json():
        location = response.json()[0]
        return float(location['lat']), float(location['lon'])
    else:
        print("Error fetching coordinates")
        return None

def fetch_osm_data(bounding_box):
    overpass_url = "http://overpass-api.de/api/interpreter"
    overpass_query = f"""
    [out:json];
    node['amenity'='restaurant']({bounding_box});
    out;
    """
    
    response = requests.post(overpass_url, data=overpass_query)
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error: {response.status_code}")
        return None

if __name__ == "__main__":
    area_code = "90210"  # Example area code (Beverly Hills, CA)
    
    # Get coordinates from area code
    coordinates = get_coordinates_from_area_code(area_code)
    
    if coordinates:
        lat, lon = coordinates
        # Define a bounding box (0.01 degrees is about 1.1 km)
        bounding_box = f"{lat-0.01},{lon-0.01},{lat+0.01},{lon+0.01}"
        
        # Fetch data from Overpass API
        osm_data = fetch_osm_data(bounding_box)
        
        if osm_data:
            for element in osm_data['elements']:
                print(f"Restaurant: {element['id']} at {element['lat']}, {element['lon']}")


<!-- upload to database and fetch requests using javascript-->
const express = require('express');
const { Pool } = require('pg');
const bcrypt = require('bcryptjs');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const pool = new Pool({
    user: 'your_db_user',
    host: 'localhost',
    database: 'your_database',
    password: 'your_db_password',
    port: 5432,
});

app.use(cors());
app.use(bodyParser.json());

// User Sign-Up Endpoint
app.post('/signup', async (req, res) => {
    const { username, email, password, latitude, longitude } = req.body;
    
    const hashedPassword = await bcrypt.hash(password, 10);

    try {
        const result = await pool.query(
            'INSERT INTO users (username, email, password, latitude, longitude) VALUES ($1, $2, $3, $4, $5) RETURNING *',
            [username, email, hashedPassword, latitude, longitude]
        );
        res.status(201).json(result.rows[0]);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Find Users in the Same Area
app.get('/find-users', async (req, res) => {
    const { latitude, longitude } = req.query;
    const radius = 50; // in km

    try {
        const result = await pool.query(`
            SELECT *, (
                6371 * acos(cos(radians($1)) * cos(radians(latitude)) *
                cos(radians(longitude) - radians($2)) +
                sin(radians($1)) * sin(radians(latitude)))
            ) AS distance
            FROM users
            HAVING distance < $3
            ORDER BY distance
            LIMIT 8
        `, [latitude, longitude, radius]);

        res.json(result.rows);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Start the Server
app.listen(3000, () => {
    console.log('Server is running on port 3000');
});

<!--front end fetching -->
async function signUpUser(data) {
    const response = await fetch('http://localhost:3000/signup', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    });

    if (response.ok) {
        const result = await response.json();
        console.log('User signed up:', result);
    } else {
        console.error('Error signing up:', response.statusText);
    }
}

